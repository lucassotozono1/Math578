import numpy as np

def solve_tridiagonal(a, b, c, d):

    n = len(a)
    a, b, c, d = map(np.array, (a, b, c, d))

    # Forward elimination
    for i in range(1, n):
        c[i - 1] /= a[i - 1]
        a[i] -= c[i - 1] * b[i - 1]

    # Forward substitution for Ly = d
    for i in range(1, n):
        d[i] -= c[i - 1] * d[i - 1]

    # Back substitution for Ux = y
    x = np.zeros_like(d)
    x[-1] = d[-1] / a[-1]
    for i in range(n - 2, -1, -1):
        x[i] = (d[i] - b[i] * x[i + 1]) / a[i]

    return x

def generate_random_tridiagonal_system(n):
    # Generate a, b, c
    a = np.random.rand(n)
    b = np.random.rand(n - 1)
    c = np.random.rand(n - 1)

    # Compute d
    d = np.zeros(n)
    d[0] = a[0] + b[0]
    d[1:n - 1] = c[:n - 2] + a[1:n - 1] + b[1:n - 1]
    d[n - 1] = c[n - 2] + a[-1]

    return a, b, c, d

def main(n):
    # Generate the tridiagonal system
    a, b, c, d = generate_random_tridiagonal_system(n)
    print(f"Generated system for n = {n}:")
    print(f"a = {a}")
    print(f"b = {b}")
    print(f"c = {c}")
    print(f"d = {d}")

    # Solve the tridiagonal system
    x = solve_tridiagonal(a, b, c, d)
    print("\nSolution x:")
    print(x)

    return x

n_values = [20, 50, 100]
for n in n_values:
    print(f"\n--- Solving for n = {n} ---")
    solution = main(n)
